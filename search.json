[{"title":"Avalonia","url":"/posts/3f413ee7/","content":"\n\n引言记录Avalonia的使用看官方文档没有解决的问题，或者记录的一些有关使用Avalonia的特别技巧。  \nISSUSAvalonia Browser 项目使用Rider启动报错\nError: Default system browser option is not supported for Blazor apps.Please select a Chromium-based browser.\n\n在Rideryo右上角DEBUG运行按钮。\n  \n拉到最下面，有一个 open browser 选项，在这里选着模块默认打开的浏览器即可  \n打开的浏览器提示安全错误 net::ERR_CERT_AUTHORITY_INVALIDnet::ERR_CERT_AUTHORITY_INVALID 是因为 Avalonia.Browser 调试时用的是 ASP.NET 内置的 自签名 HTTPS 证书，而 Chrome 默认不信任它，所以就报这个警告。  \n在 Rider 调试 Avalonia.Browser 项目的时候，Rider 会启动 Kestrel（或 ASP.NET）并监听 https://localhost:xxxx，这个证书是自动生成的，没有被系统或浏览器信任。  \n建议先尝试方式二\n方式一\n确认证书已经生成\n\n在终端（PowerShell）里执行\ndotnet dev-certs https --check\n\n如果没生成，会提示你创建证书。  \n\n重新生成并信任本地开发证书\n\ndotnet dev-certs https --cleandotnet dev-certs https --trust\n\n–trust 会在系统里安装并信任这个证书（Windows 会弹出提示，点“是”即可）。\n\n确保 Chrome 使用的是系统信任如果你之前已经打开过 Chrome 并忽略过证书错误，有时会缓存，需要清掉：\n\n在 Chrome 访问 chrome:&#x2F;&#x2F;net-internals&#x2F;#hsts\n在 Delete domain security policies 输入 localhost，点击删除\n重启 Chrome\n\nRider 设置调试浏览器Avalonia.Browser 项目调试时，如果 Rider 默认用的是 “Default system browser”，它可能会打开 Edge 或未信任的 Chrome，你可以：\n\n在 Run&#x2F;Debug Configurations 中，选择 Custom browser 并指定 Chrome 的可执行文件路径\n确保启动的 Chrome 没有加 –ignore-certificate-errors（否则无法验证是否生效）\n方式二Properties&#x2F;launchSettings.json 里，把 applicationUrl 从 https://localhost:xxxx 改成 http://localhost:xxxx\n&quot;applicationUrl&quot;: &quot;http://localhost:5235;https://localhost:7169&quot;,\n\n让http在前面\n结论总结你的文章…\n","categories":["Avalonia"],"tags":["Avalonia"]},{"title":"Deploy Hexo to GitHub Pages","url":"/posts/Deploy-Hexo-to-GitHub-Pages/","content":"摘要本文将介绍如何借助 Github Page 来搭建自己的博客（知识库），并实现提交代码（文本）到 Github 自动触发部署静态网页的流程。\n因为本人目前工作主要是 C&#x2F;S 架构的开发，目前所有的操作都是基于Windows操作说明。\n前言工作有几年了，手中的项目逐渐增多，随着解决的问题越来越多，常常忘记自己解决问题的思路，明明自己以前解决过，现在怎么就想不起来了呢。虽然有有借助 Obsidian 做各种记录，但是不方便分享，别人分享就会有点尴尬了。  \n我由此想搭建自己的个人博客，用博客来记录自己各个项目的开发过程、遇到的问题和解决方案，作为自己的长期记忆，存放在电脑里，还可以作为自己的展示平台，把自己的能力通过实打实的项目展现出来。  \n十分感谢 github 以及 hexo 的开源贡献者。\n搭建步骤准备工作想要完成部署，要准备一些本地的开发环境。开发环境不在本文章详细介绍，以下给出相关链接，自行安装。\n\nGit Downloads  \nGit Install\nnodeJs Downloads\nnodeJs Install\n\n验证Git环境：  \ngit -v\n\n验证NodeJs环境：  \nnode -v\n\n解除powershell的运行脚本的限制：\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned\n\nGithub PagesGithub Pages 官方其实为我们准备了一个教程，可以参考一下这个。\n注意事项：https://github.com/username/username.github.io你的 github-username 必须匹配，不然无法工作，username 不是显示的名字，而是你克隆仓库的那个名字。  \n如果你想修改这个名字，请参考以下步骤：点击你的头像，左侧找到 Account -&gt; Change username，按照提示的步骤修改就好。\n创建你的仓库，新增分支 gh-pages，main分支将作为 hexo 源码以及 markdown 文件的存档的分支，gh-pages则作为静态网页存放的地方。\n打开你的仓库，点击 Settings -&gt; Pages \n\n按照1，2，3，4完成设置，如果前面的设置正确，在5的位置，这就是博客域名。如果项目的名字没有匹配上规则，这里则不是这样的格式。\n以上就完成了 Gihub Pages 上的配置。\n安装Hexo打开 PowerShell，运行以下命令，安装hexo\nnpm install hexo -g\n\n在本地新建一个空文件夹，在空文件夹，右键打开PowerShell，执行以下代码，初始化Hexo： \nhexo init\n\n本地预览：\n在根路径右键打开PowerShell，输入一下命令\nhexo g #生成静态页面hexo s #启动服务器\n\n根据提示，在浏览器中输入http://localhost:4000，即可访问本地网站。\n部署Github克隆上面准备的仓库到本地。  \ngit clone git@github.com:zrongqing/zrongqing.github.io.git\n这是我的仓库地址，修改你们自己的就好\n将 hexo init 生成的文件直接复制到克隆下的仓库里面。记得Commit，将hexo保存到main分支。\n在此文件夹，右键打开powershell，执行以下命令\nnpm install hexo-deployer-git --save\n\n打开文件夹中的_config.yml文件，拉倒最后，填写deploy模块\n# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy:  type: git  repository: git@github.com:zrongqing/zrongqing.github.io.git  branch: gh-pages\n\nhexo部署的时候，会以git部署到指定的repository里面的指定branch\n执行发布\nhexo d\n\n自动化部署自动部署的核心是上传hexo源码，然后让github自动执行一个action，把源码编译成静态页面，并推送给gh-pages。\n在仓库跟路径新建文件 “.github\\workflows\\deploy.yml”\nname: Deploy Hexo to GitHub Pageson:  workflow_dispatch:  push:    branches:      - mainjobs:  build:    runs-on: ubuntu-latest    strategy:      matrix:        node-version: [22.x]    steps:    - uses: actions/checkout@v4    - name: Install npm      run: |        npm install        npm install hexo-asset-img --save    - name: Prepare Github Identity      env:          HEXO_DEPLOY_PRI: $&#123;&#123;secrets.SSH_PRI&#125;&#125;      run: |        sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;        mkdir -p ~/.ssh/        echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa        chmod 600 ~/.ssh/id_rsa        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts        git config --global user.name zrongqing        git config --global user.email wyzrq163@163.com    - name: Deploy Blog      run: |        npm run build        npm run deploy\n\n各个字段有什么含义，可以询问以下AI，这里不在重复。  \n因为是自动部署，Github执行命令的时候会将自动形成的网页发布到gh-pages分支，肯定需要我们的SSH秘钥，具体如何配置秘钥可以参考 github docs about ssh。如果能够通过ssh的方式能够上传代码就配置好了，不过都借用github搭建博客，这个大家应该都配置好了，所以就不多赘述了。\n接下来，我们要将私钥添加到 GitHub Secrets，不然自动化无法通过。\n\n点击 Settings -&gt; Secrets and variables -&gt; Actions\n点击 New repository secret，设置以下内容：\nName：SSH_PRI（这个名称需要与工作流中的 $ 一致）。\nSecret：粘贴私钥内容。\n保存\n\n\n\n需要注意，git config –global 设置的用户名和邮箱需要与 GitHub 账户一致，否则可能会导致提交记录无法关联到你的账户。\n这样自动化就能推送你的网页了。\n","tags":["Hexo"]},{"title":"avaloniaui","url":"/posts/b8fc02a1/","content":"\n\n引言在这里写下文章的开头…\n  \n\ndocs\n正文内容这里是文章的详细内容…\n结论总结你的文章…\n","categories":["avaloniaui"],"tags":["avaloniaui"]},{"title":"butterfly","url":"/posts/butterfly/","content":"","categories":["Docs"],"tags":["Hexo","主題","butterfly"]},{"title":"hexo","url":"/posts/hexo/","content":"\n\n引言记录一些使用hexo的问题以及解决方案\n  \n\nHEXO使用创建博客hexo new &quot;我的第一篇文章&quot;\n\n创建博客会使用 scaffolds&#x2F;post 中的模板去自动创建新建的博客，可以根据所选择的主题样式，去设置一些默认参数。\n自动生成永久链接（abbrlink）_config.yml 文件添加一下配置：\npermalink: posts/:abbrlink/# abbrlink 配置abbrlink:  alg: crc32  # 算法：crc16(default), crc32  rep: hex    # 进制：dec(default), hex  auto_add: true  # 自动为所有文章添加 abbrlink（即使没有设置）\n\nhexo s\n\n在调用命令 “hexo s” 后自动在文章补充自动生成的”abbrlink”字段\nISSUS结论总结你的文章…\n","categories":["hexo"],"tags":["hexo"]},{"title":"my-post","url":"/posts/my-post/","content":"markdown 博客样式收集\n代码折叠：\nfunction hello() &#123;  console.log(&quot;Hello, World!&quot;);&#125;\n\n通过HTML的方式\n\n点击展开代码\n\nfunction hello() &#123;  console.log(&quot;Hello, World!&quot;);&#125;\n\n\n\n\n样式调整目前该博客使用的是这个主题 butterfly\n\n快速开始\n\n指令"},{"title":"syncfusion","url":"/posts/syncfusion/","content":"syncfusion 相对来说有比较好的社区支持，方便自己快速制作一些小软件来使用。可以结合 CommunityToolkit.MVVM 一起俩使用\n相关链接\nsyncfusion\nsyncfusion-account\n\n","categories":["syncfusion"],"tags":["syncfusion","wpf","csharp"]},{"title":"安装WindowsServer","url":"/posts/ed05ccf6/","content":"\n\n引言在这里写下文章的开头…\n  \n\n相关链接VMware-workstation-full-17.6.4.exe:\n\n百度网盘 提取码：n2xv\n123云盘 提取码:oybi\n百度云盘 提取码: hc60\n\n26100.1742.240906-0331.ge_release_svc_refresh_SERVER_EVAL_x64FRE_zh-cn.iso:  \n\nwindow server 提取码: 52pj\n\n正文内容安装VMware：因为是破解版，没有哪些繁琐的个人版免费注册。下载好 VMware-workstation-full-17.6.4.exe 下一步下一步就好了。\nWindowsServer2025：右击开始图标，以管理员身份运行终端，执行以下命令：\nslmgr -ipk D764K-2NDRG-47T6Q-P8T8W-YP6DFslmgr -skms kms.0t.net.cnslmgr -ato  \nOperating system edition    KMS Client Product KeyWindows Server 2025 Standard    TVRH6-WHNXV-R9WG3-9XRFY-MY832Windows Server 2025 Datacenter  D764K-2NDRG-47T6Q-P8T8W-YP6DFWindows Server 2025 Datacenter: Azure Edition   XGN3F-F394H-FD2MY-PP6FD-8MCRC  \n2025 数据中心版本使用这个DISM &#x2F;online &#x2F;Set-Edition:ServerDatacenter &#x2F;ProductKey:D764K-2NDRG-47T6Q-P8T8W-YP6DF &#x2F;AcceptEula\nSqlServer2016:密钥：MDCJV-3YX8N-WG89M-KV443-G8249\n参考文章\nVMware没特别安装选项，一路安装就好\nWindowsServer2025没特别安装选项，一路安装就好\n\n在VMware里面安装完成后，可以将CPU核心和内存提高一点\n右键安装的虚拟机，将网络适配器修改成桥接模式\n网络无法ping通过，控制面板-防火墙-高级设置-入站规则，打开回显请求\n\nSqlServer2016安装功能选择这些即可，不然可能还需要安装其他服务，后续如果有用上后面再安装即可。\n安装的时候会让你输入数据库管理的账号密码，请注意保持这个账号密码。\n结论总结你的文章…\n","categories":["windowserver"],"tags":["windowserver"]}]